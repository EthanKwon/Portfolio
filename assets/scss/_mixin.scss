// responsive

$max-width-desktop: 1280px;
$max-width-laptop: 1024px;

$max-width-tablet: 768px;
$max-width-tablet-land: 1024px;

$max-width-mobile: 375px;
$max-width-mobile-land: 812px;

@mixin responsive($device) {
  @if $device == "desktop" {
    @media screen and (max-width: $max-width-desktop) {
      @content;
    }
  } @else if $device == "laptop" {
    @media screen and (max-width: $max-width-laptop) {
      @content;
    }
  } @else if $device == "tablet" {
    @media screen and (max-width: $max-width-tablet) {
      @content;
    }
  } @else if $device == "tablet_land" {
    @media screen and (max-width: $max-width-tablet-land) and (orientation: landscape) {
      @content;
    }
  } @else if $device == "mobile" {
    @media screen and (max-width: $max-width-mobile) {
      @content;
    }
  } @else if $device == "mobile_land" {
    @media screen and (max-width: $max-width-mobile-land) and (orientation: landscape) {
      @content;
    }
  }
}

// text - effect

//--------------------------
//  nth-trans-delay()
//  @description: Transition Delay on nth-childs
//  @param: $delay_items: [7]    - number of nth-of-type items to create
//  @param: $delay_time:[1.5s]   - transition-dealy value
//--------------------------
@mixin nth-trans-delay($delay_items: 7, $delay_time: 0.2s) {
  @for $i from 1 through $delay_items {
    &:nth-child(#{$i}) {
      transition-delay: $delay_time * $i;
    }
  }
}

//--------------------------
//  nth-ani-delay()
//  @description: Animation Delay on nth-childs
//  @param: $delay_items: [7] - number of nth-of-type items to create
//  @param: $delay_time:[1.5s] - transition-dealy value
//--------------------------
@mixin nth-ani-delay($delay_items: 7, $delay_time: 0.2s) {
  @for $i from 1 through $delay_items {
    &:nth-child(#{$i}) {
      animation-delay: $delay_time * $i;
    }
  }
}

//color mixin

@mixin themeMixin($themeColor, $themeBackground) {
  color: $themeColor;
  background-color: $themeBackground;
  transition: background 0.6s cubic-bezier(0.075, 0.82, 0.165, 1),
    color 0.6s cubic-bezier(0.075, 0.82, 0.165, 1);

  .loading {
    background-color: $themeBackground;
  } //loading

  .loading_line {
    background-color: $themeColor;
  }
  .small-circle {
    stroke: $themeColor;
  }
  .sec-bg {
    background-color: $themeBackground;
  }
  .button {
    path {
      stroke: $themeColor;
    } //path
    .button_label {
      &:before {
        background-color: $themeColor;
      }
    }
  }

  //logo color

  .body_logo_svg {
    fill: $themeColor;
    .nc {
      fill: $themeBackground;
    }
  } //logo_body_svg

  //header color
  .header {
    .header_stroke {
      &:before {
        background-color: $themeBackground;
        border-bottom: 1px solid $themeColor;
      }
      &:after {
        background-color: $themeColor;
      }
    }

    .header_main-item {
      &:not(:last-child):before {
        background-color: $themeColor;
      } //item:before
    } //header_main-item
  } //header

  .intro {
    .intro_btn {
      &:before {
        background-color: $themeBackground;
      }
    } //intro_btn
    .btn_circle-path {
      stroke: $themeColor;
    } //btn_circle-path
  } //intro

  .about {
    .about_main {
      &:before {
        background-color: $themeColor;
      }
    }
  } //about

  .skill {
    .skill_main {
      &:before,
      &:after {
        background-color: $themeColor;
      }
    } //skill_main
    .skill_stroke {
      &:before,
      &:after {
        background-color: $themeColor;
      }
    } //skill_stroke
    .skill_item {
      &:before,
      &:after {
        background-color: $themeColor;
      }
    } //skill_item
    .skill_svg {
      path {
        stroke: $themeColor;
      }
    }
  } //skill

  .project {
    .project_main {
      &:after {
        background-color: $themeColor;
      }
    } //project_main
    .project_name {
      background-color: $themeBackground;
      &:before {
        background-color: $themeColor;
      }
    } //project_name
  } //project

  .mini {
    .mini_main {
      &:after {
        background-color: $themeColor;
      }
    } //mini_main
    .mini_item {
      &:before,
      &:after {
        background-color: $themeColor;
      }
    } //mini_item
    .mini_link {
      &:before {
        background-color: $themeColor;
      }
    } //mini_link
  } //mini

  .contact_spin {
    text {
      fill: $themeColor;
    } //text
  } //contact_spin

  .contact {
    .contact_address {
      &:before,
      &:after {
        background-color: $themeColor;
      }
    } //contact_address
  } //contact

  .comment_spin {
    text {
      fill: $themeColor;
    } //text
  } //comment_spin

  .overlay {
    button {
      color: $themeBackground;
      .button_close {
        span {
          background-color: $themeBackground;
        }
      } //button_close
      svg {
        path {
          stroke: $themeBackground;
        } //path
      } //svg
      .close_label {
        &:before {
          background-color: $themeBackground;
        }
      }
    } //button
  } //overlay

  .overlay_bg {
    background-color: $themeColor;
  } //overlay_bg
}
